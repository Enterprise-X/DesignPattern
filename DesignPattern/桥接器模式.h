#pragma once
#include "设计模式基类.h"
class 桥接器模式 :public 设计模式基类
{
public:
	void 运行() override;

};

/*

优点:
分离抽象接口与实现部分，使用对象间的关联关系使抽象与实现解耦；
桥接模式可以取代多层继承关系，多层继承违背单一职责原则，不利于代码复用；
桥接模式提高了系统可扩展性，某个维度需要扩展只需增加实现类接口或者具体实现类，而且不影响另一个维度，符合开闭原则。

缺点:
桥接模式难以理解，因为关联关系建立在抽象层，需要一开始就设计抽象层；
如何准确识别系统中的两个维度是应用桥接模式的难点。

适用场景:
如果一个系统需要在抽象化和具体化之间增加灵活性，避免在两个层次之间增加继承关系，可以使用桥接模式在抽象层建立关联关系；
抽象部分和实现部分可以各自扩展而互不影响；
一个类存在多个独立变化的维度，可采用桥接模式。

*/

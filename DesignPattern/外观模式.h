#pragma once
#include "设计模式基类.h"
class 外观模式 :public 设计模式基类
{
public:
	void 运行() override;

};


/*
#比较简单的设计模式

优点:
外观模式使得客户端不必关心子系统组件，减少了与客户端交互的对象的数量，简化了客户端的编程；
外观模式可以大大降低系统的耦合度；
子系统的变化并不需要修改客户端，只需要适当修改外观类即可；
子系统之间不会相互影响。

缺点:
如果需要增加或者减少子系统，需要修改外观类，违反开闭原则；
并不能限制客户端直接与子系统交互，但如果加强限制，又使得系统灵活度降低。

适用场景:
为访问一系列复杂的子系统提供一个统一的、简单的入口，可以使用外观模式；
客户端与多个子系统之间存在很大依赖，但在客户端编程，又会增加系统耦合度，且使客户端编程复杂，可以使用外观模式。

*/
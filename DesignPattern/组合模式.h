#pragma once
#include "设计模式基类.h"

class 组合模式 :public 设计模式基类
{
public:
	void 运行() override;

};

/*

优点:
清楚地定义分层次的复杂对象，表示出复杂对象的层次结构，让客户端忽略层次的差异；
客户端可以一致地使用层次结构中各个层次的对象，而不必关心其具体构件的行为如何实现；
在组合模式中增加新的叶子构件和容器构件非常方便，易于扩展，符合开闭原则；
为树形结构的案例提供了解决方案。

缺点:
子构件或容器构件的行为受限制，因为它们来自相同的抽象层。如果要定义某个容器或者某个叶子节点特有的方法，那么要求在运行时判断对象类型，增加了代码的复杂度。

适用场景:
系统中需要用到【树形结构】；
系统中能够分离出容器节点和叶子节点；
具有整体和部门的层次结构中，能够通过某种方式忽略层次差异，使得客户端可以一致对待。

*/
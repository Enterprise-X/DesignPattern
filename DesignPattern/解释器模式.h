#pragma once
#include "设计模式基类.h"

class 解释器模式 :public 设计模式基类
{

public:
	void 运行() override;

};

/*
个人觉得这个设计模式较少用到。

优点:
易于改变和扩展文法，在解释器中使用类表示语言的文法规则，可以通过继承等机制类改变或扩展文法；
每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言；
如果要增加新的解释表达式，只需增加一个新的终结符表达式或非终结符表达式类，无需修改原有代码，符合开闭原则。

缺点:
对于复杂文法难以维护。在解释器模式中每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会大量增加，导致系统难以管理和维护；
执行效率低，因为解释器模式中有大量循环和递归调用。

适用环境:
一些重复出现的问题可以用一种简单的语言进行表达；
一个语言的文法较为简单；
不考虑执行效率的问题时可以使用解释器模式。

*/
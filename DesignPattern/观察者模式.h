#pragma once
#include "设计模式基类.h"
//又称监听模式
class 观察者模式 :public 设计模式基类
{

public:
	void 运行() override;

};

/*

观察者模式应用:
观察者模式是一种使用频率非常高的设计模式，几乎无处不在。凡是涉及一对一、一对多的对象交互场景，都可以使用观察者会模式。
比如购物车，浏览商品时，往购物车里添加一件商品，会引起UI多方面的变化（购物车里商品数量、对应商铺的显示、价格的显示等）；
各种编程语言的GUI事件处理的实现；所有的浏览器事件（mouseover，keypress等）都是使用观察者模式的例子。


优点:
观察者模式实现了稳定的消息更新和传递的机制，通过引入抽象层可以扩展不同的具体观察者角色；
支持广播通信，所有已注册的观察者（添加到目标列表中的对象）都会得到消息更新的通知，简化了一对多设计的难度；
符合开闭原则，增加新的观察者无需修改已有代码，在具体观察者与观察目标之间不存在关联关系的情况下增加新的观察目标也很方便。

缺点:
代码中观察者和观察目标相互引用，存在循环依赖，观察目标会触发二者循环调用，有引起系统崩溃的风险；
如果一个观察目标对象有很多直接和简介观察者，将所有的观察者都通知到会耗费大量时间。

适用环境:
一个对象的改变会引起其他对象的联动改变，但并不知道是哪些对象会产生改变以及产生什么样的改变；
如果需要设计一个链式触发的系统，可是使用观察者模式；
广播通信、消息更新通知等场景。

#实际工作中的运用:VisionTool中的VTokenMsg模块:消息命令传播
*/
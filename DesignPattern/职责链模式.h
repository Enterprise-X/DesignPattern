#pragma once
#include "设计模式基类.h"

class 职责链模式 :public 设计模式基类
{

public:
	void 运行() override;

};

/*

优点:
将请求的接收者和处理者解耦，客户端无需知道具体处理者，只针对抽象处理者编程，简化了客户端编程过程，降低系统耦合度；
在系统中增加一个新的处理者时，只需要继承抽象处理者，重新实现handleRequest()接口，无需改动原有代码，符合开闭原则；
给对象分配职责时，职责链模式赋予系统更多灵活性。

缺点:
请求没有一个明确的接收者，有可能遇到请求无法响应的问题；
比较长的职责链，其处理过程会很长。
建立职责链的工作是在客户端进行，如果建立不当，可能导致循环调用或者调用失败。

适用环境:
有多个对象处理同一个请求，具体由谁来处理是在运行时决定，客户端只需发出请求到职责链上，而无需关心具体是谁来处理；
可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变职责链中各个处理者之间的上下级关系。

*/